name: Build Linux
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
    
concurrency:
  group: environment-lin-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  # See https://github.com/git-lfs/git-lfs/issues/5749
  GIT_CLONE_PROTECTION_ACTIVE: 'false'

jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-24.04
            name: "Ubuntu 24.04"
    steps:
      - name: Setup Pragma
        uses: Silverlan/pragma/github_actions/setup@main
        
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Dependencies
        uses: Silverlan/pragma/github_actions/build@main
        id: build-deps
        with:
          # This will build the core dependencies, as well as cycles, but not Pragma
          build-args: "--with-essential-client-modules=0 --with-common-modules=0 --with-lua-debugger=0 --module pr_unirender:\"https://github.com/Silverlan/pr_cycles.git\" --build 0 --build-cycles"

      - name: Build UniRender_cycles
        shell: bash
        run: |
          root="$PWD"
          cd "${{ steps.build-deps.outputs.build-dir }}"
          cmake --build "." --config "RelWithDebInfo" --target UniRender_cycles
          
          cd $root
          mkdir -p release/modules/unirender/cycles
          releaseDir="$root/release"
          pragmaDir="${{ steps.build-deps.outputs.root-dir }}"
          depsDir="${{ steps.build-deps.outputs.deps-dir }}"
          buildDir="${{ steps.build-deps.outputs.build-dir }}"
          cyclesDir="$releaseDir/modules/unirender/cycles"

          echo "ALL FILES IN pragmaDir: $pragmaDir"
          cd $pragmaDir
          ls -R

          echo "ALL FILES IN depsDir: $depsDir"
          cd $depsDir
          ls -R

          echo "ALL FILES IN buildDir: $buildDir"
          cd $buildDir
          ls -R

          echo "ALL FILES IN cyclesDir: $cyclesDir"
          cd $cyclesDir
          ls -R
          
          copy_binary () {
             cmake -DInstallSrc="$1" -DInstallDst="$cyclesDir/" -P $pragmaDir/build_scripts/cmake/install_file.cmake
          }
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_atomic.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_chrono.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_date_time.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_filesystem.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_regex.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_serialization.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_system.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_thread.so"
          copy_binary "$depsDir/boost_1_78_0/stage/lib/libboost_wave.so"
          copy_binary "$depsDir/lib/linux_x86_64/openexr-3.1/lib/libIex.so"
          copy_binary "$depsDir/lib/linux_x86_64/openexr-3.1/lib/libIlmThread.so"
          copy_binary "$depsDir/lib/linux_x86_64/Imath/build/src/Imath/libImath-3_1.so"
          copy_binary "$depsDir/lib/linux_x86_64/ocio-2.1/lib/libOpenColorIO.so"
          copy_binary "$depsDir/lib/linux_x86_64/openexr-3.1/lib/libOpenEXR.so"
          copy_binary "$depsDir/lib/linux_x86_64/openexr-3.1/lib/libOpenEXRCore.so"
          copy_binary "$depsDir/lib/linux_x86_64/openexr-3.1/lib/libOpenEXRUtil.so"
          copy_binary "$depsDir/lib/linux_x86_64/oiio-2.3/lib/libOpenImageIO.so"
          copy_binary "$depsDir/lib/linux_x86_64/oiio-2.3/lib/libOpenImageIO_Util.so"
          copy_binary "$depsDir/lib/linux_x86_64/openvdb-9.0/lib/libopenvdb.so"
          copy_binary "$depsDir/lib/linux_x86_64/osl-1.12/lib/liboslcomp.so"
          copy_binary "$depsDir/lib/linux_x86_64/osl-1.12/lib/liboslexec.so"
          copy_binary "$depsDir/lib/linux_x86_64/osl-1.12/lib/liboslnoise.so"
          copy_binary "$depsDir/lib/linux_x86_64/osl-1.12/lib/liboslquery.so"
          copy_binary "$depsDir/lib/linux_x86_64/tiff/build/libtiff/libtiff.so"
          copy_binary "$buildDir/modules/pr_unirender/external_libs/cycles/libUniRender_cycles.so"
          
          mkdir -p "$cyclesDir/source"
          cp -r "$depsDir/cycles/src/kernel" "$cyclesDir/source/kernel"
          cp -r "$depsDir/cycles/src/util" "$cyclesDir/source/util"
          
          cp $depsDir/cycles/build/src/kernel/*.ptx "$cyclesDir/source/kernel/"
          cp $depsDir/cycles/build/src/kernel/*.cubin "$cyclesDir/source/kernel/"

      - name: Copy render_raytracing files
        shell: bash
        run: |
          mkdir -p "release/lib"
          cp "${{ steps.build-deps.outputs.install-dir }}/lib/librender_raytracing_lib.so" "release/lib" || true
          cp "${{ steps.build-deps.outputs.install-dir }}/lib/render_raytracing" "release/lib" || true
          cp "${{ steps.build-deps.outputs.install-dir }}/lib/libutil_raytracing.so" "release/lib" || true
          cp "${{ steps.build-deps.outputs.install-dir }}/lib/libOpenColorIO*" "release/lib" || true
          cp "${{ steps.build-deps.outputs.install-dir }}/lib/libOpenImageDenoise*" "release/lib" || true

      - name: Release Binaries
        uses: Silverlan/common_actions/release_nightly_binaries@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: ${{ github.ref_name }}
